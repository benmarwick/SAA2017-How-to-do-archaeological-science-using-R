setwd("E:/My Documents/My Papers/conferences/SAA2017/SAA2017 R forum")
knitr::opts_chunk$set(echo = TRUE)
child = read.csv("Combined_Orph_NA_data.csv")
plot(Distance_KM ~ Year,
data = child)
summary(lm(Distance_KM ~ Year,
data = child))
NAB = subset(child,
Instit_Type == "NAB")
EAO = subset(child,
Instit_Type == "O")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
child = read.csv("Combined_Orph_NA_data.csv")
# Chunk 3
plot(Distance_KM ~ Year,
data = child)
# Chunk 4
summary(lm(Distance_KM ~ Year,
data = child))
NAB = subset(child,
Instit_Type == "NAB")
EAO = subset(child,
Instit_Type == "O")
plot(NAB$Distance_KM ~ NAB$Year,
main = "Distance from Urban area vs. year Native American boarding schools")
abline(lm(NAB$Distance_KM~NAB$Year),
col = "red")
plot(EAO$Distance_KM~EAO$Year,
main = "Distance fromm urban area vs. year Orphanages")
abline(lm(EAO$Distance_KM~EAO$Year),
col = "red")
summary(lm(NAB$Distance_KM ~ NAB$Year))
summary(lm(EAO$Distance_KM ~ EAO$Year))
NAB_no = subset(NAB, NAB$Distance_KM < 100)
EAO_no = subset(EAO, EAO$Distance_KM < 50)
plot(NAB_no$Distance_KM~NAB_no$Year,
main = "Distance from Urban area vs. year Native American boarding schools, No Outliers")
abline(lm(NAB_no$Distance_KM~NAB_no$Year),
col = "red")
plot(EAO_no$Distance_KM~EAO_no$Year,
main = "Distance fromm urban area vs. year Orphanages, No outliers")
abline(lm(EAO_no$Distance_KM~EAO_no$Year),
col = "red")
summary(lm(NAB_no$Distance_KM ~ NAB_no$Year))
summary(lm(EAO_no$Distance_KM ~ EAO_no$Year))
setwd("E:/My Documents/My Papers/conferences/SAA2017/SAA2017 R forum/Contreras")
# getting started: load necessary packages
require(rgdal)
require(raster)
require(rasterVis)
require(lattice)
install.
install.packages("rasterVis")
areaDEM <- raster("demo_files/areaDEM.tif")  #read raster
areaDEM <- raster("/demo_files/areaDEM.tif")  #read raster
areaDEM <- raster("/demo_files/areaDEM.tif")  #read raster
areaDEM <- raster("demo_files/areaDEM.tif")  #read raster
areaDEMutm <- projectRaster(areaDEM,
crs="+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") #in case projecting raster is necessary
areaDEMutm  #have a quick look at this to make sure nothing has gone terribly wrong
sites <- readOGR(dsn="demo_files", layer="areaPoints") #read .shp
sites_sub <- sites[sites$period == "MBA" | sites$period == "GalRom",]  # subset points to eliminate sites of uncertain date
sites_sub_utm <- spTransform(sites_sub,
"+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") #project points
sites_sub_utm <- spTransform(sites_sub,
"+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0") # project points
sites_sub_utm  #check the file
area_slope <- terrain(areaDEMutm, opt = 'slope', unit = 'degrees')
area_aspect <- terrain(areaDEMutm, opt = 'aspect', unit = 'degrees')
area_slope
area_aspect
levelplot(areaDEMutm,
margin = list(x = F, y = T),
col.regions = terrain.colors(16),
xlab = list (label = "",
vjust = -.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5)
)
levelplot(areaDEMutm,
margin = list(x = F, y = T),
col.regions = terrain.colors(16),
xlab = list(label = "",
vjust = -0.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5)
)
areaDEMutm
rasterVis::levelplot(areaDEMutm,
margin = list(x = FALSE,
y = TRUE),
col.regions = terrain.colors(16),
xlab = list(label = "",
vjust = -0.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5)
)
??levelplot
?levelplot
rasterVis::levelplot(areaDEMutm,
margin = list(x = FALSE,
y = TRUE),
col.regions = terrain.colors(16),
xlab = list(label = "",
vjust = -0.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5))
rasterVis::levelplot(areaDEMutm,
margin = list(x = F,
y = T),
col.regions = terrain.colors(16),
xlab = list (label = "",
vjust = -.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5)
) +
spplot(sites_sub_utm,
zcol = "period",
cex = .6)
?spplot
sites_sub_utm
rasterVis::levelplot(areaDEMutm,
margin = list(x = F,
y = T),
col.regions = terrain.colors(16),
xlab = list (label = "",
vjust = -.25),
sub = list(
label = "masl",
font = 1,
cex = .9,
hjust = 1.5)
) +
spplot(sites_sub_utm, # add a layer of points
zcol = "period",
cex = .6)
terrainstack <- stack(areaDEMutm,
area_slope,
area_aspect)
terrainstack #have a quick look at results, which show the number of layers and the min/max values we expect
sites_vals <- extract(terrainstack,
sites_sub_utm,
buffer = 250,
fun = mean,
sp = TRUE) #extract the mean values w/in a 250m radius around each site for each terrain variable
summary(sites_vals$period)#calculate n for each class
elevplot <- bwplot(areaDEM ~ period,
data = data.frame(sites_vals),
notch = TRUE,
pch = "|",
fill = "grey",
box.ratio = 0.25,
ylab = "masl",
main="Elevation",
scales = list(x = list(labels = c("Gallo-Roman\n(n = 508)",
"Middle Bronze Age\n(n = 121)")),
rot=60)) # write plot to an object for later use (if you just want to display it, simply run the code w/o writing to an object)
elevplot
slopeplot <- bwplot(slope ~ period,
data = data.frame(sites_vals),
notch = TRUE,
pch = "|",
fill = "grey",
box.ratio = 0.25,
ylab = "slope (degrees)",
main = "Slope",
scales = list(x = list(labels = c("Gallo-Roman\n(n = 508)",
"Middle Bronze Age\n(n = 121)")),
rot = 60))
slopeplot
aspectplot <- bwplot(aspect ~ period,
data = data.frame(sites_vals),
notch = TRUE,
pch = "|",
fill = "grey",
box.ratio = 0.25,
ylab = "aspect (degrees)",
main = "Aspect",
scales = list(x = list(labels = c("Gallo-Roman\n(n = 508)",
"Middle Bronze Age\n(n = 121)")),
rot=60))
aspectplot
sites_vals
grid.arrange(elevplot,
slopeplot,
aspectplot,
nrow = 1,
ncol = 3)
require(gridExtra)
grid.arrange(elevplot,
slopeplot,
aspectplot,
nrow = 1,
ncol = 3)
mcmc <- read.csv("loi-mcmc.csv")
Sys.time(  (dtcsv <- data.table::fread("loi-mcmc.csv"))  )
?Sys.time
system.time(  (dtcsv <- data.table::fread("loi-mcmc.csv"))  )
system.time(   (mcmc <- read.csv("loi-mcmc.csv"))
system.time(  (dtcsv <- data.table::fread("loi-mcmc.csv"))
system.time(  (dtcsv <- readr::read_csv("loi-mcmc.csv"))
system.time(   (mcmc <- read.csv("loi-mcmc.csv")) )
system.time(  (dtcsv <- data.table::fread("loi-mcmc.csv")) )
system.time(  (dtcsv <- readr::read_csv("loi-mcmc.csv")) )
system.time(   (mcmc <- read.csv("loi-mcmc.csv")) )
system.time(  (dtcsv <- data.table::fread("loi-mcmc.csv")) )
system.time(  (dtcsv <- readr::read_csv("loi-mcmc.csv")) )
colnames(mcmc)
mcmc <- readr::read_csv("loi-mcmc.csv")
mcmc <- readr::read_csv("loi-mcmc.csv")
mcmc <- readr::read_csv("loi-mcmc.csv")
colnames(mcmc)
i <- c(43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88)
mcmc.select <- mcmc[,i]
colnames(mcmc.select)
source("tempo-plot-demo-saa-2017.r")
calc.tempo <- function(mcmc.data, by.int, out.file="") {
years <- seq(from = floor(min(mcmc.data)), to = ceiling(max(mcmc.data)), by = by.int)
res.mat <- matrix(ncol = length(years), nrow = dim(mcmc.data)[1])
for (i in 1:length(years)) {
gte <- mcmc.data <= years[i]
res.mat[,i] <- rowSums(gte)
}
means <- colMeans(res.mat)
sds <- apply(res.mat, 2, sd)
res.df <- data.frame(mean = means, sd = sds, year = years)
if (!(out.file == "")) {
write.csv(res.df, out.file)
}
return(res.df)
}
loi.tempo <- calc.tempo(mcmc.data = mcmc.select, by.in = 10, out.file = "loi-tempo.csv")
summary(loi.tempo)
plot.tempo <- function(tempo.data = NULL, in.file = "",  out.file = "", max.x = NA,
min.x = NA, y.label = "Cumulative Events",
x.label = "Calendar Year", plot.ht = 7,
plot.wi = 7){
library(ggplot2)
if (is.null(tempo.data)){
if (in.file == ""){
stop("No data source")}
else {
tempo.data <- read.csv(in.file)}
}
h <- ggplot(tempo.data, aes(x = year))
h <- h + geom_ribbon(aes(ymin = mean - sd, ymax = mean + sd))
h <- h + geom_line(aes(y = mean))
h <- h + xlab(x.label) + ylab(y.label)
if (!(is.na(max.x) | is.na(min.x))){
h <- h + xlim(min.x, max.x)
}
if (!(out.file == "")) {
ggsave(filename = out.file, plot= h, height = plot.ht, width = plot.wi)
}
old.par <- par(no.readonly = T)
dev.new(width = plot.wi, height = plot.ht)
print(h)
par(old.par)
}
plot.tempo(tempo.data = loi.tempo, out.file = "loi-tempo.png", plot.ht = 3)
?readr::read_csv
mcmc <- readr::read_csv("loi-mcmc.csv", col_names = F)
mcmc
mcmc <- data.table::fread("loi-mcmc.csv")
mcmc
colnames(mcmc)
mcmc <- readr::read_csv("loi-mcmc.csv")
names(mcmc) <- make.names(names(mcmc))
names(mcmc)
