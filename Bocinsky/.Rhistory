knitr::opts_chunk$set(echo = TRUE)
packages <- c("magrittr", # For piping
"foreach", "purrr", "tibble", "dplyr", "tidyr", "broom", # For tidy data analysis
"ggplot2","plotly", # For fancy graphs
"sp", "rgdal", "raster", # For spatial analysis
"leaflet", "htmltools", # For fancy maps
"FedData")
# install.packages("devtools")
devtools::install_cran(packages, repos = "https://cran.rstudio.com/") # For downloading federated geospatial data
purrr::walk(packages, library, character.only = TRUE) # Load all packages with no output
dir.create("OUTPUT",
showWarnings = FALSE,
recursive = FALSE)
purrr::walk(packages, library, character.only = TRUE) # Load all packages with no output
dir.create("OUTPUT",
showWarnings = FALSE,
recursive = FALSE)
# Load the shapefile
census_counties <- rgdal::readOGR(dsn = "OUTPUT/counties",
layer = "cb_2015_us_county_500k")
# Inspect the spatial object
census_counties
# Select Whitman county
my_county <- census_counties[census_counties$NAME == "Whitman",]
# Inspect the spatial object
my_county
# Transform to geographic coordinates
my_county %<>%
sp::spTransform("+proj=longlat")
# Get a polygon of the rectangular extent of Whitman county. This is our study area.
my_county_extent <- my_county %>%
FedData::polygon_from_extent()
cell_towers <- readr::read_csv("/data/cell_towers.csv")
cell_towers <- readr::read_csv("data/cell_towers.csv")
cell_towers
# Create a SpatialPointsDataFrame by adding coordinates
coordinates(cell_towers) <- ~Longitude+Latitude
# And set the projection information
proj4string(cell_towers) <- "+proj=longlat"
# Select cell towers in our study area
cell_towers %<>%
crop(my_county_extent)
cell_towers
# Create a quick plot of the locations
leaflet(width = "100%") %>% # This line initializes the leaflet map, and sets the width of the map at 100% of the window
addProviderTiles("OpenTopoMap", group = "Topo") %>% # This line adds the topographic map from Garmin
addProviderTiles("OpenStreetMap.BlackAndWhite", group = "OpenStreetMap") %>% # This line adds the OpenStreetMap tiles
addProviderTiles("Esri.WorldImagery", group = "Satellite") %>% # This line adds orthoimagery from ESRI
addProviderTiles("Stamen.TonerLines", # This line and the next adds roads and labels to the orthoimagery layer
group = "Satellite") %>%
addProviderTiles("Stamen.TonerLabels",
group = "Satellite") %>%
addPolygons(data = my_county_extent, # This line adds the Whitman county extent polygon
label = "My County Extent",
fill = FALSE,
color = "black") %>%
addPolygons(data = my_county, # This line adds the Whitman county polygon
label = "My County",
fill = FALSE,
color = "red") %>%
addMarkers(data = cell_towers,
popup = ~htmlEscape(`Entity Name`)) %>% # This line adds cell tower locations
addLayersControl( # This line adds a controller for the background layers
baseGroups = c("Topo", "OpenStreetMap", "Satellite"),
options = layersControlOptions(collapsed = FALSE),
position = "topleft")
# Download the 1 arc-second NED elevation model for our study area
my_county_NED <- FedData::get_ned(template = my_county,
label = "my_county",
raw.dir = "OUTPUT/RAW/NED",
extraction.dir = "OUTPUT/EXTRACTIONS/NED")
# Print the my_county_NED object
my_county_NED
# Plot the my_county_NED object
my_county_NED %>%
plot()
# Plot the my_county polygon over the elevation raster
my_county %>%
plot(add = T)
# Extract cell tower elevations from the study area NED values
cell_towers$`Elevation (m)` <- my_county_NED %>%
raster::extract(cell_towers)
cell_towers@data
cell_towers_densities <- cell_towers$`Elevation (m)` %>%
density(from = 150,
to = 1250,
n = 1101) %>%
tidy() %>%
tibble::as_tibble() %>%
dplyr::mutate(y = y * 1101) %>%
dplyr::rename(Elevation = x,
Frequency = y)
# Load the NED elevations into memory for fast bootstrapping
my_county_NED_values <- my_county_NED %>%
values()
# Draw 999 random samples, and calculate their densities
my_county_NED_densities <- foreach(n = 1:999, .combine = rbind) %do% {
my_county_NED_values %>%
sample(length(cell_towers),
replace = FALSE) %>%
density(from = 150,
to = 1250,
n = 1101) %>%
tidy() %>%
tibble::as_tibble() %>%
dplyr::mutate(y = y * 1101)
} %>%
group_by(x) %>%
# by_slice(~ quantile(.$y, probs = c(0.025, 0.5, 0.975)))
do({
quantile(.$y, probs = c(0.025, 0.5, 0.975)) %>%
t() %>%
tidy()
}) %>%
set_names(c("Elevation", "Lower CI", "Frequency", "Upper CI"))
g <- ggplot() +
geom_line(data = my_county_NED_densities,
mapping = aes(x = Elevation,
y = Frequency)) +
geom_ribbon(data = my_county_NED_densities,
mapping = aes(x = Elevation,
ymin = `Lower CI`,
ymax = `Upper CI`),
alpha = 0.3) +
geom_line(data = cell_towers_densities,
mapping = aes(x = Elevation,
y = Frequency),
color = "red")
ggplotly(g)
my_county
?FedData::get_ned
FedData::get_ned
my_county_NED <- FedData::get_ned(template = my_county,
label = "my_county",
raw.dir = "OUTPUT/RAW/NED",
extraction.dir = "OUTPUT/EXTRACTIONS/NED")
my_county_NED <- FedData::get_ned(template = my_county,
label = "my_county",
raw.dir = "OUTPUT/RAW/NED",
extraction.dir = "OUTPUT/EXTRACTIONS/NED")
my_county_NED <- FedData::get_ned(template = my_county,
label = "my_county",
raw.dir = "OUTPUT/RAW/NED",
extraction.dir = "OUTPUT/EXTRACTIONS/NED")
